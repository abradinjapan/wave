[
    Strings
]

print.new_line()() = {
    wave.set(wave.integer.10)(new_line)
    wave.print.character(new_line)()
}

string.print(start end)() = {
    [ setup variables ]
    wave.set(wave.integer.1)(character_size)
    wave.set(wave.integer.1)(always)

    [ setup current ]
    wave.copy(start)(current)

    [ loop start ]
    @print_character

    [ check if loop should quit ]
    wave.integer.within_range(start current end)(continue)
    wave.boolean.not(continue)(quit)
    wave.jump(quit @exit)()

    [ get character ]
    wave.address_to_cell(current character_size)(character error)

    [ next character ]
    wave.integer.add(current character_size)(current)

    [ print character ]
    wave.print.character(character)()

    [ jump to loop start ]
    wave.jump(always @print_character)()

    [ loop end ]
    @exit

    [ print new line ]
    print.new_line()()
}

character.size()(bytes) = {
    wave.set(wave.integer.1)(bytes)
}

[
    Lexer
]

compiler.lex.skip.whitespace(user_code.start user_code.current user_code.end)(user_code.new_current) = {
    [ setup variables ]
    wave.set(wave.integer.0)(whitespace.start)
    wave.set(wave.integer.32)(whitespace.end)
    character.size()(character.size)

    [ search for whitespace and skip it ]
    @find_whitespace_character

    [ check to see if at the end of the buffer ]
    wave.integer.within_range(user_code.start user_code.current user_code.end)(get_next_character)
    wave.boolean.not(get_next_character)(quit)
    wave.jump(quit @exit)()

    [ get character ]
    wave.address_to_cell(user_code.current character.size)(character error)

    [ increment to next character ]
    wave.integer.add(user_code.current character.size)(user_code.current)

    [ check space character ]
    wave.integer.within_range(whitespace.start character whitespace.end)(get_next_character)

    [ jump to next character if whitespace found ]
    wave.jump(get_next_character @find_whitespace_character)()

    [ exit ]
    @exit

    [ setup outputs ]
    wave.copy(user_code.current)(user_code.new_current)
}

compiler.lex.pass(user_code.start user_code.end)(lexlings.start lexlings.end lexlings.count) = {
    [ setup current ]
    wave.copy(user_code.start)(user_code.current)

    [ loop start ]

}

compiler.lex(user_code.start user_code.end)(lexlings.start lexlings.end) = {
    [ run first pass ]
    wave.set(wave.integer.0)(record)
    compiler.lex.pass(user_code.start user_code.end)(lexlings.start lexlings.end lexlings.count)
}

[
    Main
]
main()() = {
    [ get file name ]
    wave.get_console_input()(file_path.start file_path.end)

    [ load file ]
    wave.file_to_buffer(file_path.start file_path.end)(file.start file.end error)

    [ lex file ]
    compiler.lex(file.start file.end)(lexlings.start lexlings.end)

    [ clean up ]
    wave.return_memory(file_path.start file_path.end)()
    wave.return_memory(file.start file.end)()
    wave.return_memory(lexlings.start lexlings.end)()
}
