[ print a buffer ]
test.print_buffer(address)() = {
    [ setup variables ]
    pirate.write_cell(pirate.integer.1)(character_size)
    pirate.write_cell(pirate.integer.0)(termination)
    pirate.copy(address)(character_current)
    pirate.write_cell(@print_character)(offset.print_character)
    pirate.write_cell(@leave)(offset.leave)

    [ setup the offset ]
    @print_character

    [ get a character ]
    pirate.address_to_cell(character_current character_size)(character)

    [ check if character is null termination ]
    pirate.integer_within_range(termination character termination)(is_termination)

    [ jump if termination ]
    pirate.jump_if(is_termination offset.leave)()

    [ if not, print current character ]
    pirate.print_cell_as_character(character)()

    [ advance to next character ]
    pirate.integer_add(character_current character_size)(character_current)

    [ jump to loop start for next character ]
    pirate.jump_to(offset.leave)()

    [ leave function ]
    @leave
}

[ write one character and advance to the next one ]
test.write_character(character input.string_current)(output.string_current) = {
    [ setup variables ]
    pirate.write_cell(pirate.integer.1)(character.byte_size)

    [ write character ]
    pirate.cell_to_address(character character.byte_size input.string_current)()

    [ advance to next character ]
    pirate.integer_add(input.string_current character.byte_size)(output.string_current)
}

[ since there are no working strings in pirate, a manual buffer write will be done instead ]
test.create_file_string()(output.string) = {
    [ write the allocation size ]
    pirate.write_cell(pirate.integer.200)(allocation_size)

    [ perform allocation ]
    pirate.request_memory(allocation_size)(string)

    [ setup write ]
    pirate.copy(string)(string_current)

    [ write the characters ]
    pirate.write_cell(pirate.integer.109)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.97)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.107)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.101)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.102)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.105)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.108)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.101)(character)
    test.write_character(character string_current)(string_current)
    pirate.write_cell(pirate.integer.0)(character)
    test.write_character(character string_current)(string_current)

    [ return the buffer ]
    pirate.copy(string)(output.string)
}

[ main ]
pirate.sail()() = {
    [ get the file path ]
    test.create_file_string()(file_path)

    [ print the file path ]
    test.print_buffer(file_path)()

    [ open the file ]


    [ clean up ]
    pirate.return_memory(file_path)()
}
